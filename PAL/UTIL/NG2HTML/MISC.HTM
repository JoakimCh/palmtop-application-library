<HTML>
<HEAD><TITLE>PAL - Quickreference: Misc</TITLE></HEAD>
<BODY>
<H1>PAL - Quickreference: Misc</H1>
<HR>
<A NAME="Miscellaneous routines"><HR>
<H2> Miscellaneous routines
</H2>
</A><P>
This set of functions is for special operations, such as control
of the volume, serial port, light-sleep and timeout of the
palmtop, get scancode and ASCII code from a pressed key, and
much more.
<P>
Available functions:
<P>
<BR><A HREF="#AnnuncPos">AnnuncPos</A>
       : Set the annunciators position (Shift,CAPS,Fn indicators).
<BR><A HREF="#Check5f">Check5f</A>
         : Check for presence of INT 5Fh services.
<BR><A HREF="#CheckSysMgr">CheckSysMgr</A>
     : Check for presence of INT 7Eh (SysMgr) services.
<BR><A HREF="#FatalExit">FatalExit</A>
       : Fatal error exit from PAL and return error code to DOS.
<BR><A HREF="#PalInit">PalInit</A>
         : Initialize PAL library (the first thing to do).
<BR><A HREF="#PalDeInit">PalDeInit</A>
       : Shut down PAL library (just before exiting program).
<BR><A HREF="#WhichHp">WhichHp</A>
         : Returns the model number of the palmtop we're running upon.
<BR><A HREF="#GetKey">GetKey</A>
          : Get a key (with ASCII and Scan code).
<BR><A HREF="#KeyWaiting">KeyWaiting</A>
      : Check if a key is waiting
<BR><A HREF="#PushKeys">PushKeys</A>
        : Push a sequence of Keys which GetKey will deliver.
<BR><A HREF="#Volume">Volume</A>
          : Set the volume level of the palmtop.
<BR><A HREF="#GetVolume">GetVolume</A>
       : Get the current volume level.
<BR><A HREF="#SetSerialPort">SetSerialPort</A>
   : Turn on/off the serial port COM1 of the palmtop.
<BR><A HREF="#SetLightSleep">SetLightSleep</A>
   : Enable/disable light-sleep (Power-management).
<BR><A HREF="#SetTimeOut">SetTimeOut</A>
      : Set the timeout delay of the Auto-Power-Off feature.
<BR><A HREF="#MsgBox">MsgBox</A>
          : Display a message box with title, text and buttons
<BR><A HREF="#MsgWin">MsgWin</A>
          : Display a message window without waiting
<BR><A HREF="#AskYesNo">AskYesNo</A>
        : Ask user Yes or No
<BR><A HREF="#MsDelay">MsDelay</A>
         : Wait a specific number of milliseconds
<BR><A HREF="#BattType">BattType</A>
        : Set/get battery type.
<BR><A HREF="#BattVoltage">BattVoltage</A>
     : Read main/backup battery voltage.
<BR><A HREF="#BattStatus">BattStatus</A>
      : Check main/backup/card battery status (OK/LOW)
<BR><A HREF="#ChargeMode">ChargeMode</A>
      : Enable/Disable battery charging.
<BR><A HREF="#BattFast">BattFast</A>
        : Detect if battery is fast charging.
<BR><A HREF="#BattGetTimer">BattGetTimer</A>
    : Read battery charging timer.
<BR><A HREF="#BattSetTimer">BattSetTimer</A>
    : Set battery charging timer.
<BR><A HREF="#DCStatus">DCStatus</A>
        : Detects if an external DC adaptor is used.
<BR><A HREF="#OpenMeter">OpenMeter</A>
       : Opens (displays) a progress/level meter.
<BR><A HREF="#UpdateMeter">UpdateMeter</A>
     : Updates the percentage (level) of an active meter.
<BR><A HREF="#CloseMeter">CloseMeter</A>
      : Closes an active meter.
<BR><A HREF="#SetErrorHandler">SetErrorHandler</A>
 : specify alternate error handler
<BR><A HREF="#LastMemoFile">LastMemoFile</A>
    : return last file edited in MEMO
<BR><A HREF="#SerialCtl">SerialCtl</A>
       : Toggle SysMgr serial port interference
<P>
<BR><A HREF="#Protect">Protect</A>
         : Enable hardware RAM protection.   (Internal use).
<BR><A HREF="#Unprotect">Unprotect</A>
       : Disable hardware RAM protection.  (Internal use).
<BR><A HREF="#AsmSTI">AsmSTI</A>
          : Enable interrupts.                (Internal use).
<BR><A HREF="#AsmCLI">AsmCLI</A>
          : Disable interrupts.               (Internal use).
<P>
<P>
<HR><H2><A NAME="AnnuncPos">AnnuncPos</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      AnnuncPos</PRE><DT>DESCRIPTION
<DD><PRE>      This function places the annunciators (Shift,Caps,Fn indicators) on
      the bottom left or right of the screen. It is useful to place the
      annunciators to the left of the screen in your programs, so they don't
      get over the F1 label on the screen (like in the PIMs).</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void AnnuncPos(int position);</PRE><DT>INPUTS
<DD><PRE>      position - The position of the annunciators. You can use one of
                 the following values:

                 AN_LEFT : place annunciators to the bottom left,
                 AN_RIGHT: place annunciators to the bottom right.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      The annunciators are usually to the right side of the screen while
      in DOS, and to the left when in the System Manager PIMs.</PRE><DT>SAMPLE
<DD><PRE>      AnnuncPos(AN_LEFT);  /* place annunciators to the left side */</PRE><DT>SEE ALSO
<DD><A HREF="lograph.HTM#GraphMode">GraphMode</A>
<A HREF="lograph.HTM#TextMode">TextMode</A>

</DL><HR><H2><A NAME="Check5f">Check5f</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      Check5f</PRE><DT>DESCRIPTION
<DD><PRE>      This function checks for the presence of INT 5Fh services
      (Either running on palmtop or on PC with emulator). Returns
      TRUE if services are present.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int  Check5f(void);</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>      TRUE if INT 5Fh services are present.</PRE><DT>NOTE
<DD><PRE>      You can use the CGAGRAPH.COM or CG.COM emulator to have access
      of the INT 5Fh services on your desktop (286+ only).
      The GraphMode() function includes the Check5f() test.</PRE><DT>SAMPLE
<DD><PRE>      if(!Check5f()) FatalExit("Init failed - CGAGRAPH not loaded ?", 1);</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#PalInit">PalInit</A>
<A HREF="misc.HTM#FatalExit">FatalExit</A>

</DL><HR><H2><A NAME="CheckSysMgr">CheckSysMgr</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      CheckSysMgr</PRE><DT>DESCRIPTION
<DD><PRE>      This function checks if the System manager is loaded.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int CheckSysMgr(void);</PRE><DT>INPUTS
<DD><PRE>      None.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE (1) if SysMgr is loaded, FALSE (0) otherwise.</PRE><DT>NOTE
<DD><PRE>      Checking for SysMgr presence is mandatory for PAL applications
      that use functions from the SM_SVC module - these will not
      work and even crash without the presence of SysMgr.</PRE><DT>SAMPLE
<DD><PRE>    if(!CheckSysMgr()) printf("SysMgr not loaded!\n");
    else printf("SysMgr is loaded...\n");</PRE></DL><HR><H2><A NAME="FatalExit">FatalExit</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      FatalExit</PRE><DT>DESCRIPTION
<DD><PRE>      This function is used to exit the program when a fatal error occurs.
      You can specify the error message to be displayed and the error
      code to be returned to DOS.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void FatalExit(char *Msg, int ExitCode);</PRE><DT>INPUTS
<DD><PRE>      Msg      - The error message you want to be displayed.
      ExitCode - The error code (number) to be returned to DOS.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns the error code to DOS and quits program.</PRE><DT>NOTE
<DD><PRE>      This function automatically resets the screen mode to text
      upon exit.</PRE><DT>SAMPLE
<DD><PRE>
   if(!(pFont = LoadFont("span0015.hfn"))) FatalExit("Load Font failed", 1);</PRE><DT>SEE ALSO
<DD><A HREF="lograph.HTM#TextMode">TextMode</A>

</DL><HR><H2><A NAME="PalInit">PalInit</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      PalInit</PRE><DT>DESCRIPTION
<DD><PRE>      This function initializes the PAL library. It can optionally
      switch to graphics mode and also sets the 'Palmtop'
      variable to non-zero if running on HP palmtop. This is the
      first function that is usually called in a program using
      the PAL library.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int  PalInit(int Graphics);</PRE><DT>INPUTS
<DD><PRE>      Graphics - a flag: pass 1 if you want PalInit to switch to
                 graphics mode. (Generally the case)</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE if successful.</PRE><DT>NOTE
<DD><PRE>      The opposite function of PalInit() is PalDeInit().</PRE><DT>SAMPLE
<DD><PRE>   if(!PalInit(1)) FatalExit("PalInit failed.", 1);</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#FatalExit">FatalExit</A>
<A HREF="lograph.HTM#SetRule">SetRule</A>
<A HREF="lograph.HTM#SetColor">SetColor</A>
<A HREF="lograph.HTM#SelectFont">SelectFont</A>
<A HREF="misc.HTM#PalDeInit">PalDeInit</A>

</DL><HR><H2><A NAME="PalDeInit">PalDeInit</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      PalDeInit</PRE><DT>DESCRIPTION
<DD><PRE>      This function shuts down the PAL library. It is normally
      called just before exiting the program.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void PalDeInit(int Text);</PRE><DT>INPUTS
<DD><PRE>      Text  -  a flag: pass 1 if you want PalDeInit to switch
               to text mode for you.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      This function is the opposite of PalInit().</PRE><DT>SAMPLE
<DD><PRE>      PalDeInit(1);  /* shut down PAL services, switch to text */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#PalInit">PalInit</A>
<A HREF="lograph.HTM#TextMode">TextMode</A>

</DL><HR><H2><A NAME="WhichHp">WhichHp</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      WhichHp</PRE><DT>DESCRIPTION
<DD><PRE>      This function returns the HP model number of the palmtop we're
      running upon.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int  WhichHp(void);</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>        0 --&gt; no palmtop, PC
       95 --&gt; HP95LX
      100 --&gt; HP100LX</PRE><DT>SAMPLE
<DD><PRE>      if(WhichHp() == 0) printf("This is not an HP palmtop!");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#Check5f">Check5f</A>

</DL><HR><H2><A NAME="GetKey">GetKey</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      GetKey</PRE><DT>DESCRIPTION
<DD><PRE>      This function will wait for a keystroke and return it in both ASCII
      and scancode. The upper byte of the result will hold the scancode,
      the lower byte the ASCII code. This function can also detect the
      palmtop-specific keys like MENU.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      WORD GetKey(void);</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>      A 16-bit value (WORD) with the most significant byte for the scancode,
      and the least significant byte for the ASCII code.</PRE><DT>NOTE
<DD><PRE>      This function can work in conjunction with the PushKeys() function
      which allows to push a sequence of Keys which GetKey will deliver.</PRE><DT>SAMPLE
<DD><PRE>      int key;

      /* Get scancode and ASCII code */
      key = GetKey();  /* wait for a key press */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#PushKeys">PushKeys</A>
<A HREF="misc.HTM#KeyWaiting">KeyWaiting</A>

</DL><HR><H2><A NAME="KeyWaiting">KeyWaiting</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      KeyWaiting</PRE><DT>DESCRIPTION
<DD><PRE>      Return TRUE if a keystroke is waiting to be retrieved via
      GetKey</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int KeyWaiting(void);</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>      TRUE if a key is waiting, else FALSE.</PRE><DT>NOTE
<DD><PRE>      This function respects keys pushed with the PushKeys function.
      Using kbhit() will not know about these.</PRE><DT>SAMPLE
<DD><PRE>      if(KeyWaiting()) break; /* leave loop if user presses a key */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#PushKeys">PushKeys</A>
<A HREF="misc.HTM#GetKey">GetKey</A>

</DL><HR><H2><A NAME="PushKeys">PushKeys</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      PushKeys</PRE><DT>DESCRIPTION
<DD><PRE>      This function is used in conjunction with GetKey() and pushes a
      sequence of keys that GetKey() can deliver.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void PushKeys(WORD *pKeys);</PRE><DT>INPUTS
<DD><PRE>      pKeys - pointer to a 0-terminated array of WORDs, with the most
              significant byte as scancode and the least significant
              one as ASCII code.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      This function is using a global int array called KStack[MAX_KEYSTACK]
      which can hold up to MAX_KEYSTACK entries. It is used in recursive
      calls to PushKeys - this way, pushed keystrokes that cause PushKeys
      to be called again when being retrieved by GetKey don't cause a
      problem. Note that the Menu module calls PushKeys itself.</PRE><DT>SAMPLE
<DD><PRE>      Not available at this moment.</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#GetKey">GetKey</A>
<A HREF="misc.HTM#KeyWaiting">KeyWaiting</A>

</DL><HR><H2><A NAME="Volume">Volume</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      Volume</PRE><DT>DESCRIPTION
<DD><PRE>      This function sets the volume level of the palmtop.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void Volume(int Level);</PRE><DT>INPUTS
<DD><PRE>      Level - The volume level, which can be one of the 4 possible
              settings:

                VOL_OFF   : Set volume completely off.
                VOL_LOW   : Set volume to the lowest level.
                VOL_MEDIUM: Set volume to the middle level.
                VOL_HI    : Set volume to the maximum level.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      The default setting is VOL_HI.</PRE><DT>SAMPLE
<DD><PRE>      Volume(VOL_HI);  /* set volume to maximum */</PRE><DT>SEE ALSO
<DD><A HREF="sm_svc.HTM#m_play">m_play</A>
<A HREF="sm_svc.HTM#m_asound">m_asound</A>

</DL><HR><H2><A NAME="SetSerialPort">SetSerialPort</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      SetSerialPort</PRE><DT>DESCRIPTION
<DD><PRE>      This function turns on or off the serial port COM1 (wire) of the
      palmtop.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void SetSerialPort(int Mode);</PRE><DT>INPUTS
<DD><PRE>      Mode - Can be either SERIAL_ON, or SERIAL_OFF.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      When the serial port is ON, the palmtop drains the batteries faster.
      Do not forget to turn it off when not in use. The baudrate settings
      are not affected when calling this function. The Infared (I.R.) port
      is not affected either.</PRE><DT>SAMPLE
<DD><PRE>      SetSerialPort(SERIAL_OFF); /* turn off serial port */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#SetLightSleep">SetLightSleep</A>

</DL><HR><H2><A NAME="SetLightSleep">SetLightSleep</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      SetLightSleep</PRE><DT>DESCRIPTION
<DD><PRE>      This function enables/disables the power-management feature called
      'light-sleep'. This does accelerate the computer's speed somehow,
      but decreases battery life. It is useful to turn it off while doing
      a search for example, to speed-up the search process.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void SetLightSleep(int Mode);</PRE><DT>INPUTS
<DD><PRE>      Mode - Can be either SLEEP_ON, or SLEEP_OFF.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      When the light sleep feature is disabled, the battery life is reduced
      dramatically. It is important to remember to turn this feature back ON
      before exiting your program.</PRE><DT>SAMPLE
<DD><PRE>      SetLightSleep(SLEEP_ON); /* enable light-sleep */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#SetSerialPort">SetSerialPort</A>
<A HREF="misc.HTM#SetTimeOut">SetTimeOut</A>

</DL><HR><H2><A NAME="SetTimeOut">SetTimeOut</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      SetTimeOut</PRE><DT>DESCRIPTION
<DD><PRE>      This function will change the time-out delay of the Auto-Shut-Off
      feature of the palmtop.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void SetTimeOut(WORD value);</PRE><DT>INPUTS
<DD><PRE>      value - A 16-bit value for the time-out delay. The value is actually
              the number of clock ticks (18.2 per second), so a time-out
              delay of ten seconds should be 182.</PRE><DT>RETURN VALUE
<DD><PRE>      None</PRE><DT>NOTE
<DD><PRE>      WARNING!!! If the time-out value is too small the palmtop will turn
      off as soon as you turn it on, and only a CTL-ALT-DEL (warm boot)
      will bring it back to normal!</PRE><DT>SAMPLE
<DD><PRE>      SetTimeOut(2184); /* set timeout to 2 minutes */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#SetLightSleep">SetLightSleep</A>

</DL><HR><H2><A NAME="MsgBox">MsgBox</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      MsgBox</PRE><DT>DESCRIPTION
<DD><PRE>      MsgBox will display a message window with a title and text that
      you specify, and lets the user select one of up to five buttons
      that you also define. It will return the index of the button that
      the user selected. Optionally, a pointer to an input buffer may
      be passed - the message box will then also have an input field
      where the user can type text. The buffer will contain that text
      when MsgBox returns.

      MsgBox can also display a function key bar at the bottom of
      the screen. This is triggered by embedding function key names
      and optionally labels in the button label strings. See the
      description of the 'Buttons' parameter below for details.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int MsgBox(char *Title, char *Msg, char *Inp, char *Buttons, ...);</PRE><DT>INPUTS
<DD><PRE>      Title   - a short title string, will be displayed at the top of
                the window. If you don't want a title, use NULL here.

      Msg     - the message that will be displayed inside the message
                window. If you want line breaks, use the '|' character
                to insert them. (See example below). There may be ten
                lines of text at most. You may use printf format
                specifiers in the message. The corresponding parameters
                must be specified _following_ the Buttons argument.

      Inp     - if this pointer is not NULL, it should point to an
                input buffer of at least 80 characters. The message
                box will contain an input field in this case, and the
                input that the user types will end up in that buffer.
                If you pass NULL for this parameter, there will not
                be an input field.

                Note: If Inp is not NULL, the two last lines of the
                Msg string (that is, the two last segments delimited
                by '|') have special meaning. The first one is the
                prompt that will appear before the input field,
                the second one is the initial contents of that field.

      Buttons - the legends to be displayed on the buttons. Separate
                them with a '|' character. (see example below)
                If you don't want buttons, use NULL here. You may
                have a maximum of five buttons. Start the legend of
                a button with '!' if you want it to be the one that
                initially has the focus. If you want your button to
                be associated with a function key (and the labels
                displayed), append [Fn] to your button legend,
                replacing 'n' by the function key number. To e.g.
                assign a button labeled 'Yes' to the F6 key, you would
                use this: " Yes [F6]". You can have an alternate
                text displayed on the key - add a colon and the key
                label that you would like. Sample Buttons string:
                " Integrate [F2:Int]|Differentiate [F3:Dif]".

                Note: If you just want the default function key
                labels displayed, use [F] in any of your button
                labesl.


      ...     - a variable number of parameters - corresponding to
                the printf format specifiers in the Msg string.
                The resulting message may not exceed 1K in length !</PRE><DT>RETURN VALUE
<DD><PRE>      The index of the selected button (starting at zero for the first
      one), or the predefined constants DN_OK and DN_CANCEL, if the user
      hit F10 or ESC, respectively.</PRE><DT>NOTE
<DD><PRE>      You may want to pad button labels with blanks for better optics.
      That is, instead of "OK|Cancel" use "  OK  |Cancel" to give both
      buttons the same width.</PRE><DT>SAMPLE
<DD><PRE>      int r;

      r = MsgBox("Attention", " | Sure delete %s ? | ",
                 NULL, "  OK  |!Cancel", FileName);
      if(r == 0 || r == DN_OK) DeleteFile(FileName);</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#AskYesNo">AskYesNo</A>
<A HREF="misc.HTM#MsgWin">MsgWin</A>

</DL><HR><H2><A NAME="MsgWin">MsgWin</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      MsgWin</PRE><DT>DESCRIPTION
<DD><PRE>      MsgWin will display a message window with a title and text that
      you specify. Unlike MsgBox, MsgWin does not wait for a keystroke,
      it immediately returns, leaving the window on-screen. You can
      close the window and free associated memory by calling MsgWin
      again, specifying a NULL Msg pointer. Intermediate calls with
      a different Msg are OK too - the window will be closed and then
      reopened, displaying the new text.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int MsgWin(char *Title, char *Msg, ...);</PRE><DT>INPUTS
<DD><PRE>      Title   - a short title string, will be displayed at the top of
                the window. If you don't want a title, use NULL here.

      Msg     - the message that will be displayed inside the message
                window. If you want line breaks, use the '|' character
                to insert them. (See example below). There may be ten
                lines of text at most. You may use printf format
                specifiers in the message. The corresponding parameters
                must be specified following the Msg argument.
                To close the window, call MsgWin again, and specify
                NULL for this parameter.

      ...     - a variable number of parameters - corresponding to
                the printf format specifiers in the Msg string.
                The resulting message may not exceed 1K in length !</PRE><DT>RETURN VALUE
<DD><PR</PRE><DT>NOTE
<DD><PR</PRE><DT>SAMPLE
<DD><PRE>      int i;

      for(i = 0; i &lt; FileCount; i++) {
         MsgWin(" Search in progress ",
             " Searching file #%d | (Hit a key to abort)", i);
         SearchFile(i);
         if(KeyWaiting()) break;
      }</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#AskYesNo">AskYesNo</A>
<A HREF="misc.HTM#MsgBox">MsgBox</A>


</DL><HR><H2><A NAME="AskYesNo">AskYesNo</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      AskYesNo</PRE><DT>DESCRIPTION
<DD><PRE>      AskYesNo will display a message window with a question that you
      specify, and lets the user select either the YES or the NO
      button. It will return TRUE for YES and FALSE for NO</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int AskYesNo(char *Question);</PRE><DT>INPUTS
<DD><PRE>      Question - the question that you want to ask the user.</PRE><DT>RETURN VALUE
<DD><PRE>      TRUE if the user selected the YES button or hit F10, FALSE if
      he selected the NO button.</PRE><DT>SAMPLE
<DD><PRE>      if(AskYesNo("Will you marry me ?")) Celebrate();</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#MsgBox">MsgBox</A>

</DL><HR><H2><A NAME="MsDelay">MsDelay</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      MsDelay</PRE><DT>DESCRIPTION
<DD><PRE>      MsDelay will wait for a specified number of milliseconds.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void MsDelay(unsigned int MilliSecs)</PRE><DT>INPUTS
<DD><PRE>      MilliSecs - the number of milliseconds to wait.</PRE><DT>NOTE
<DD><PRE>      Although the waiting period is specified in milliseconds, the
      actual resolution is of an 18th of a second only. Also note that
      since the parameter is an unsigned int, about 65 seconds is
      the longest period that you can wait for.
      Finally, this function will not work if the 18 Hz interrupt
      is disabled.</PRE><DT>SAMPLE
<DD><PRE>      MsDelay(2000); /* wait 2 seconds */</PRE></DL><HR><H2><A NAME="BattType">BattType</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattType</PRE><DT>DESCRIPTION
<DD><PRE>      Get/set main battery type to either ALK_BATT or NICD_BATT.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int BattType(int type);</PRE><DT>INPUTS
<DD><PRE>      type -  Can set to either ALK_BATT for alkaline, NICD_BATT for
              NiCd, or BATT_STAT to get the battery type only.</PRE><DT>RETURN VALUE
<DD><PRE>      if the specified type is BATT_STAT, BattType() returns the
      battery type, and does not alter the battery type setting.
      It returns ALK_BATT for alkaline, NICD_BATT for Nickel Cadmium.</PRE><DT>SAMPLE
<DD><PRE>
      /* set battery type */
      BattType(NICD_BATT);

      /* read battery type */
      if(BattType(BATT_STAT)==ALK_BATT) printf("Battery is Alkaline\n");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattStatus">BattStatus</A>

</DL><HR><H2><A NAME="BattVoltage">BattVoltage</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattVoltage</PRE><DT>DESCRIPTION
<DD><PRE>      Read the MAIN or BACKUP battery voltage.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int BattVoltage(int battery);</PRE><DT>INPUTS
<DD><PRE>      battery -  Specify which battery voltage to read,
                 MAIN_BATT for main, BACK_BATT for lithium backup.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns an integer specifying the battery voltage. The
      returned value range is from 157 to 330, where 157 is
      for 1.57 volts, and 330 for 3.30 volts.</PRE><DT>SAMPLE
<DD><PRE>
      /* get main battery voltage */
      printf("Main battery voltage=%u", BattVoltage(MAIN_BATT));</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#ChargeMode">ChargeMode</A>
<A HREF="misc.HTM#DCStatus">DCStatus</A>


</DL><HR><H2><A NAME="BattStatus">BattStatus</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattStatus</PRE><DT>DESCRIPTION
<DD><PRE>      Gets the MAIN, BACKUP or CARD battery status (OK or LOW).</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int BattStatus(int battery);</PRE><DT>INPUTS
<DD><PRE>      battery -  Specify which battery status to check: CARD_BATT
                 for drive's A: card battery, MAIN_BATT for main,
                 BACK_BATT for lithium backup batter</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE (1) if battery is LOW, FALSE (0) otherwise.
      It returns (2) when main battery is VERY LOW.</PRE><DT>SAMPLE
<DD><PRE>
      /* check main battery status */
      if(BattStatus(MAIN_BATT)) printf("Main battery low!\n");
      if(!BattStatus(MAIN_BATT)) printf("Main battery ok.\n");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#ChargeMode">ChargeMode</A>
<A HREF="misc.HTM#DCStatus">DCStatus</A>

</DL><HR><H2><A NAME="ChargeMode">ChargeMode</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      ChargeMode</PRE><DT>DESCRIPTION
<DD><PRE>      Enable/disable battery charging, or read the charging status.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int ChargeMode(int mode);</PRE><DT>INPUTS
<DD><PRE>      mode - Use CHG_ENA to enable charging, CHG_DIS to disable
             charging, CHG_STAT to read the charging state.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE if charging is enabled, FALSE otherwise.</PRE><DT>NOTES
<DD><PRE>      Warning! Enable charging for NiCad batteries only!</PRE><DT>SAMPLE
<DD><PRE>
      /* enable NiCad charging */
      ChargeMode(CHG_ENA);

      /* check if charging is enabled */
      if(ChargeMode(CHG_STAT)) printf("Charging is enabled\n");
      if(!ChargeMode(CHG_STAT)) printf("Charging is disabled\n");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#DCStatus">DCStatus</A>

</DL><HR><H2><A NAME="DCStatus">DCStatus</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      DCStatus</PRE><DT>DESCRIPTION
<DD><PRE>      Detects if an external DC adaptor is used.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int DCStatus(void);</PRE><DT>INPUTS
<DD><PRE>      none.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE if the palmtop is powered by an external
      DC adaptor.</PRE><DT>SAMPLE
<DD><PRE>
      /* check DC adaptor's presence */
      if(DCStatus()) printf("DC adaptor is connected\n");
      if(!DCStatus()) printf("DC adaptor is not connected\n");
</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#BattVoltage">BattVoltage</A>

</DL><HR><H2><A NAME="OpenMeter">OpenMeter</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      OpenMeter</PRE><DT>DESCRIPTION
<DD><PRE>      This function opens and displays a progress or level
      meter. The screen background is automatically saved
      (like a window function).</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"

      METER *OpenMeter(int type, int Xpos, int Ypos, int size,
                 WORD BegVal, WORD EndVal, char *title);
</PRE><DT>INPUTS
<DD><PRE>
      type - Can be PROG_METER for a progress meter, LEVEL_METER
             for a level meter.

      size - Can be a value from 1 to 4. This determines the
             lenght of the meter on the screen.

      title- The title of the meter. If no title is given,
             no title is displayed.

      Xpos, Ypos - The top left corner screen coordinates of
                   the meter.

      BegVal- Starting index value of level meter.
      EndVal- Ending index value of level meter.</PRE><DT>RETURN VALUE
<DD><PRE>
     A METER structure pointer.
</PRE><DT>SAMPLE
<DD><PRE>
#include "pal.h"

void main(void)
{
   METER *pMtr;
   int f, min = 10, max = 250;

   PalInit(1);

   pMtr  = OpenMeter(PROG_METER, 100,50, 3, min, max, "Progress level:");

   for(f=min;f&lt;max+1;f+=1) {
      UpdateMeter(pMtr,f);
      GetKey();
   }

   CloseMeter(pMtr);
   PalDeInit(1);
}
</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#CloseMeter">CloseMeter</A>
<A HREF="misc.HTM#UpdateMeter">UpdateMeter</A>

</DL><HR><H2><A NAME="CloseMeter">CloseMeter</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      CloseMeter</PRE><DT>DESCRIPTION
<DD><PRE>      Closes an active progress/level meter and restore the
      screen contents behind it.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void CloseMeter(METER *pMtr);</PRE><DT>INPUTS
<DD><PRE>      METER - A pointer of type METER of an active level meter.</PRE><DT>RETURN VALUE
<DD><PRE>      none.</PRE><DT>SAMPLE
<DD><PRE>      See the OpenMeter function.</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#OpenMeter">OpenMeter</A>
<A HREF="misc.HTM#UpdateMeter">UpdateMeter</A>

</DL><HR><H2><A NAME="UpdateMeter">UpdateMeter</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      UpdateMeter</PRE><DT>DESCRIPTION
<DD><PRE>      This function updates the level of an active meter.
      The specified level is a value between the specified
      BegVal &amp; EndVal in the OpenMeter() function.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void UpdateMeter(METER *pMtr, int Level);</PRE><DT>INPUTS
<DD><PRE>
      METER - A pointer of type METER of an active level meter.
      level - The BegVal - EndVal index value.</PRE><DT>RETURN VALUE
<DD><PRE>      None.</PRE><DT>SAMPLE
<DD><PRE>
      See the OpenMeter function.</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#OpenMeter">OpenMeter</A>
<A HREF="misc.HTM#CloseMeter">CloseMeter</A>

</DL><HR><H2><A NAME="GetVolume">GetVolume</A>
</H2>

<DL>
<DT>NAME
<DD><PRE>      GetVolume</PRE><DT>DESCRIPTION
<DD><PRE>      This function gets the volume level of the palmtop.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int GetVolume(void);</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>      Returns the volume level of the built-in speaker.
      Return values: (VOL_OFF, VOL_LOW, VOL_MEDIUM, VOL_HI)</PRE><DT>NOTE
<DD><PR</PRE><DT>SAMPLE
<DD><PRE>      vol=GetVolume();</PRE><DT>SEE ALSO
<DD><A HREF="sm_svc.HTM#m_play">m_play</A>
<A HREF="sm_svc.HTM#m_asound">m_asound</A>

</DL><HR><H2><A NAME="BattFast">BattFast</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattFast</PRE><DT>DESCRIPTION
<DD><PRE>      Detects if the battery is fast charging.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int BattFast(void);</PRE><DT>INPUTS
<DD><PRE>      none.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns TRUE if the battery is fast charging, FALSE if
      trickle charging.</PRE><DT>SAMPLE
<DD><PRE>
      if(BattFast()) printf("Battery is fast charging!\n");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#BattVoltage">BattVoltage</A>

</DL><HR><H2><A NAME="BattGetTimer">BattGetTimer</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattGetTimer</PRE><DT>DESCRIPTION
<DD><PRE>      Reads the battery charging timer value (seconds).</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int BattGetTimer(void);</PRE><DT>INPUTS
<DD><PRE>      none.</PRE><DT>RETURN VALUE
<DD><PRE>      Returns the time that the battery has been charging in
      seconds.</PRE><DT>SAMPLE
<DD><PRE>
      seconds = BattGetTimer(); /* how long is it charging? */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#BattVoltage">BattVoltage</A>

</DL><HR><H2><A NAME="BattSetTimer">BattSetTimer</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      BattSetTimer</PRE><DT>DESCRIPTION
<DD><PRE>      Sets the battery charging timer value in seconds.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void BattSetTimer(int secs);</PRE><DT>INPUTS
<DD><PRE>
      secs - Value in seconds for the charging period.</PRE><DT>RETURN VALUE
<DD><PRE>      Non</PRE><DT>SAMPLE
<DD><PRE>
      BattSetTimer(60); /* charge for 60 seconds */</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#BattType">BattType</A>
<A HREF="misc.HTM#BattStatus">BattStatus</A>
<A HREF="misc.HTM#BattVoltage">BattVoltage</A>

</DL><HR><H2><A NAME="SetErrorHandler">SetErrorHandler</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      SetErrorHandler</PRE><DT>DESCRIPTION
<DD><PRE>      This function replaces the DOS default errorhandler (DEF_ERRH).
      If an error occurs in a system function DOS will normally
      display the error and asks what to do with it (Abort,
      Retry, Ignore or Fail). If you specify the NOE_ERRH
      handlertype the errorhandler will be replaced by one
      supplied in the PAL library. This errorhandler will suppress
      any DOS message. It acts as if the user selected 'fail' or
      'ignore'. The function that was called will returned with
      a corresponding error indication - your program should check
      for this.
</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int SetErrorHandler(int HandlerType);</PRE><DT>INPUTS
<DD><PRE>      HandlerType - The handler to be used. You can use one of the
                    following values:

                    DEF_ERRH : The default errorhandler from DOS.
                    NOE_ERRH : No errors errorhandler.</PRE><DT>RETURN VALUE
<DD><PRE>      This function will always return 0 if one of the defined
      handlers is used. If an unknown handler type is used it will
      return 1.</PRE><DT>NOTE
<DD><PRE>      To work safe use it only when you use some system function
      like access to disk. After the function is executed turn
      the DEF_ERRH on. This way the DOS errors will be displayed
      in places you did not check if anything could go wrong. It
      is not necessary to switch back to DEF_ERRH before
      quitting your program. If an program ends DOS will turn
      the default errorhandler on itself.</PRE><DT>SAMPLE
<DD><PRE>      int file_exist;

      SetErrorHandler(NOE_ERRH);
      file_exist = access("a:\\test.xyz", 0);       /* check if file exist */
      SetErrorHandler(DEF_ERRH);
      if (file_exist != 0 ) printf("File does not exist or no disk in drive\n");</PRE><DT>SEE ALSO
<DD><A HREF="misc.HTM#FatalExit">FatalExit</A>

</DL><HR><H2><A NAME="LastMemoFile">LastMemoFile</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      LastMemoFile</PRE><DT>DESCRIPTION
<DD><PRE>      This function returns the filename of the last
      file edited (more precisely: saved) in the MEMO editor.
      The full path is included.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      void *LastMemoFile(void)</PRE><DT>INPUTS
<DD><PRE>      None</PRE><DT>RETURN VALUE
<DD><PRE>      A pointer to the filename (static buffer !) or NULL
      on error.</PRE><DT>SAMPLE
<DD><PRE>      char *Name;

      Name = LastMemoFile();
      MsgBox(" Note ", "The last MEMO file was | %s | right ?", NULL,
             " OK ", Name);</PRE><DT>SEE ALSO
<DD>
</DL><HR><H2><A NAME="SerialCtl">SerialCtl</A>
</H2>
<DL>
<DT>NAME
<DD><PRE>      SerialCtl</PRE><DT>DESCRIPTION
<DD><PRE>      SerialCtl will disable/enable SysMgr serial port interference.
      DOS applications that do serial port I/O cannot run correctly
      under SysMgr unless they are installed with task-switching
      disabled in the application manager. SerialCtl will switch
      off SysMgr interference, while maintaining switchability.</PRE><DT>SYNOPSIS
<DD><PRE>      #include "pal.h"
      int SerialCtl(int State);</PRE><DT>INPUTS
<DD><PRE>      int State         Whether to disable interference or not.
                        a 1 will disable interference, a 0 will
                        enable it again.</PRE><DT>RETURNS
<DD><PRE>      TRUE if SysMgr is not running or if action could be
      performed, FALSE otherwise</PRE><DT>NOTE
<DD><PRE>      SerialCtl writes to an undocumented SysMgr control
      variable to do its thing. Since this variable is not
      at the same location in the various ROM releases, it
      uses some heuristics to find it. It tries to make sure
      that it writes to the right location - if this routine
      returns FALSE to indicate that it did not succeed, it
      is probably not compatible with your ROM release. Some
      TSRs that hook interrupt 1C may also keep it from
      working.</PRE><DT>SAMPLE
<DD><PRE>     SerialCtl(1); /* turn interference off */
     SerialTransfer();
     SerialCtl(0); /* allow interference again */</PRE></DL></BODY>
</HTML>